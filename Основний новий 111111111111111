// ==UserScript==
// @name         Universal main (v1.7 Updated)
// @namespace    Violentmonkey Scripts
// @match        https://portal.minv.sk/wps/portal/domov/ecu/ecu_elektronicke_sluzby/ecu-vysys/*
// @grant        none
// @version      1.7
// @author       -
// @description  –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ MINV –∑ Telegram, CAPTCHA, GPT-4o, —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏, UI —Ç–∞ –Ω–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
// @run-at       document-end
// ==/UserScript==

(function () {
    'use strict';

    // –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–∫–æ—é/–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º —Å–∫—Ä–∏–ø—Ç–∞
    let isScriptStopped = localStorage.getItem('isScriptStopped') === 'true' || false;
    let currentCityIndex = parseInt(localStorage.getItem('currentCityIndex') || '0', 10);
    const availableCities = ['Bansk√° Bystrica', 'Bratislava', 'Dunajsk√° Streda', 'Ko≈°ice', 'Michalovce', 'Nitra', 'Nov√© Z√°mky', 'Pre≈°ov', 'Rimavsk√° Sobota', 'Ru≈æomberok', 'Trenƒç√≠n', 'Trnava', '≈Ωilina'];
    const USER_CITIES = JSON.parse(localStorage.getItem('USER_CITIES') || '["OCP Michalovce", "OCP Bratislava"]'); // –ú–∞—Å–∏–≤ –º—ñ—Å—Ç
    let USER_CITY = USER_CITIES[currentCityIndex];

    // –û–Ω–æ–≤–ª–µ–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
    const USER_NAME = localStorage.getItem('USER_NAME') || 'Yaroslav';
    const USER_SURNAME = localStorage.getItem('USER_SURNAME') || 'Batryn';
    const USER_BIRTHDATE = localStorage.getItem('USER_BIRTHDATE') || '10.08.1991';
    const USER_PHONE = localStorage.getItem('USER_PHONE') || '+421940252953';
    const USER_EMAIL = localStorage.getItem('USER_EMAIL') || 'ivanikrakusinko1a1a10111@gmail.com';
    const USER_PASSPORT = 'T';
    const STEP3_SELECT_1_VALUE = localStorage.getItem('STEP3_SELECT_1_VALUE') || '242';
    const STEP3_SELECT_2_VALUE = localStorage.getItem('STEP3_SELECT_2_VALUE') || '243';

    const OPENAI_MODELS = ['gpt-4o', 'gpt-4.1', 'gpt-4.1-mini', 'gpt-4'];
    const OPENAI_API_KEY = localStorage.getItem('OPENAI_API_KEY') || 'sk-proj-7oh1Zgb8SHJoFO7nXeZXpHfF-isuZOyBHLFvJV88xGD1TKvQSW_8DQQ5HwO_gv8sRK1v7PU80vT3BlbkFJ20kJ8hlvm7DDim-90js6HfRAWw92evngeZpsuCQhke1Va4OOUrZIGLtohYxRpaEZ5FA_Xj7ygAA';
    const OPENAI_PROJECT_ID = localStorage.getItem('OPENAI_PROJECT_ID') || 'proj_WWWImdcpG5yV58xSokbj5nbm';
    const TELEGRAM_BOT_TOKEN = localStorage.getItem('TELEGRAM_BOT_TOKEN') || '8041735564:AAEOPeEFkF3RL4kdF8ZS02980WlKggTuV-EA';
    const TELEGRAM_CHAT_ID = localStorage.getItem('TELEGRAM_CHAT_ID') || '814270232A';

    // –ì–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É
    let clipboardCheckTimeout;


    window.addEventListener('load', () => {
        const btn = document.createElement('button');
        btn.textContent = '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è';
        btn.style = 'position:fixed;top:20px;right:20px;z-index:9999;padding:8px 12px;background:#333;color:white;border:none;border-radius:5px;cursor:pointer;';
        btn.onclick = openSettingsModal;
        document.body.appendChild(btn);

        const stopBtn = document.createElement('button');
        stopBtn.id = 'stopScriptBtn';
        stopBtn.textContent = isScriptStopped ? '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' : '‚è∏Ô∏è –°—Ç–æ–ø';
        stopBtn.style = 'position:fixed;top:60px;right:20px;z-index:9999;padding:8px 12px;background:#d9534f;color:white;border:none;border-radius:5px;cursor:pointer;';
        if (isScriptStopped) {
            stopBtn.style.backgroundColor = '#5cb85c'; // –ó–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏"
        }
        stopBtn.onclick = toggleScriptStop;
        document.body.appendChild(stopBtn);
    });

    window.openSettingsModal = function () {
        const html = `
            <div id="settingsModal" style="position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:9999;display:flex;align-items:center;justify-content:center;">
                <div style="background:white;padding:20px;border-radius:8px;max-width:500px;width:100%;max-height:90vh;overflow:auto;">
                    <h2 style="margin-top:0;">‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h2>
                    <label>üë§ –Ü–º‚Äô—è: <input id="set_name" value="${USER_NAME}" /></label><br/><br/>
                    <label>üë§ –ü—Ä—ñ–∑–≤–∏—â–µ: <input id="set_surname" value="${USER_SURNAME}" /></label><br/><br/>
                    <label>üéÇ –î–∞—Ç–∞ –Ω–∞—Ä.: <input id="set_birth" value="${USER_BIRTHDATE}" /></label><br/><br/>
                    <label>üìû –¢–µ–ª.: <input id="set_phone" value="${USER_PHONE}" /></label><br/><br/>
                    <label>üìß Email: <input id="set_email" value="${USER_EMAIL}" /></label><br/><br/>
                    <label>üü¶ –ú—ñ—Å—Ç–∞:</label><br/>
                    <div id="set_cities_container" style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px;">
                        ${availableCities.map(city => `
                            <label style="display: block; margin-bottom: 5px;">
                                <input type="checkbox" class="city-checkbox" value="OCP ${city}" ${USER_CITIES.includes('OCP ' + city) ? 'checked' : ''}>
                                OCP ${city}
                            </label>
                        `).join('')}
                    </div>
                    <br/>
                    <label>üìã –¢–∏–ø:
                        <select id="set_type">
                            ${[
                                ['213', '228', 'Doklady / pasy ‚Äì ≈Ωiados≈• o vydanie dokladu o pobyte'],
                                ['242', '243', 'Doƒçasn√© √∫toƒçisko ‚Äì Registr√°cia doƒçasn√©ho √∫toƒçiska'],
                                ['242', '250', 'Doƒçasn√© √∫toƒçisko ‚Äì ≈Ωiados≈• o vydanie dokladu o pobyte'],
                                ['216', '225', 'Prechodn√Ω pobyt ‚Äì ≈Ωiados≈• o udelenie prechodn√©ho pobytu'],
                                ['216', '226', 'Prechodn√Ω pobyt ‚Äì ≈Ωiados≈• o obnovenie prechodn√©ho pobytu'],
                                ['216', '249', 'Prechodn√Ω pobyt ‚Äì Podnikanie - udelenie'],
                                ['216', '240', 'Prechodn√Ω pobyt ‚Äì Rodina - udelenie'],
                                ['216', '241', 'Prechodn√Ω pobyt ‚Äì Rodina - obnova'],
                                ['216', '244', 'Prechodn√Ω pobyt ‚Äì Zamestnanie - udelenie'],
                                ['216', '245', 'Prechodn√Ω pobyt ‚Äì Zamestnanie - obnova'],
                                ['218', '224', 'Trval√Ω pobyt ‚Äì neobmedzen√Ω ƒças'],
                                ['218', '223', 'Trval√Ω pobyt ‚Äì –Ω–∞ 5 rokov']
                            ].map(([v1, v2, label]) => `<option value="${v1}|${v2}"${STEP3_SELECT_1_VALUE === v1 && STEP3_SELECT_2_VALUE === v2 ? ' selected' : ''}>${label} (${v1} ‚Üí ${v2})</option>`).join('')}
                        </select>
                    </label><br/><br/>
                    <label>üß† OpenAI API: <input id="set_openai" value="${OPENAI_API_KEY}" /></label><br/><br/>
                    <label>üß† OpenAI Project: <input id="set_openai_proj" value="${OPENAI_PROJECT_ID}" /></label><br/><br/>
                    <label>üì¨ TG Token: <input id="set_tg_token" value="${TELEGRAM_BOT_TOKEN}" /></label><br/><br/>
                    <label>üì¨ TG Chat ID: <input id="set_tg_chat" value="${TELEGRAM_CHAT_ID}" /></label><br/><br/>
                    <button onclick="saveSettings()">üíæ –ó–±–µ—Ä–µ–≥—Ç–∏</button>
                    <button onclick="document.getElementById('settingsModal').remove()">‚ùå –ó–∞–∫—Ä–∏—Ç–∏</button>
                </div>
            </div>
        `;
        const modal = document.createElement('div');
        modal.innerHTML = html;
        document.body.appendChild(modal);
    }

    window.saveSettings = function () {
        localStorage.setItem('USER_NAME', document.getElementById('set_name').value);
        localStorage.setItem('USER_SURNAME', document.getElementById('set_surname').value);
        localStorage.setItem('USER_BIRTHDATE', document.getElementById('set_birth').value);
        localStorage.setItem('USER_PHONE', document.getElementById('set_phone').value);
        localStorage.setItem('USER_EMAIL', document.getElementById('set_email').value);

        const selectedCities = Array.from(document.querySelectorAll('#set_cities_container .city-checkbox:checked'))
                                      .map(checkbox => checkbox.value);
        localStorage.setItem('USER_CITIES', JSON.stringify(selectedCities));
        localStorage.setItem('currentCityIndex', '0'); // –°–∫–∏–¥–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–æ–≤–∏—Ö –º—ñ—Å—Ç

        const [v1, v2] = document.getElementById('set_type').value.split('|');
        localStorage.setItem('STEP3_SELECT_1_VALUE', v1);
        localStorage.setItem('STEP3_SELECT_2_VALUE', v2);

        localStorage.setItem('OPENAI_API_KEY', document.getElementById('set_openai').value);
        localStorage.setItem('OPENAI_PROJECT_ID', document.getElementById('set_openai_proj').value);
        localStorage.setItem('TELEGRAM_BOT_TOKEN', document.getElementById('set_tg_token').value);
        localStorage.setItem('TELEGRAM_CHAT_ID', document.getElementById('set_tg_chat').value);
        alert('‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É');
    }

    window.toggleScriptStop = function () {
        isScriptStopped = !isScriptStopped;
        localStorage.setItem('isScriptStopped', isScriptStopped);
        const stopBtn = document.getElementById('stopScriptBtn');
        if (isScriptStopped) {
            stopBtn.textContent = '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏';
            stopBtn.style.backgroundColor = '#5cb85c'; // –ó–µ–ª–µ–Ω–∏–π
            console.log('‚è∏Ô∏è –°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.');
            sendTelegramMessage('‚è∏Ô∏è –°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.');
        } else {
            stopBtn.textContent = '‚è∏Ô∏è –°—Ç–æ–ø';
            stopBtn.style.backgroundColor = '#d9534f'; // –ß–µ—Ä–≤–æ–Ω–∏–π
            console.log('‚ñ∂Ô∏è –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ.');
            sendTelegramMessage('‚ñ∂Ô∏è –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –≤—Ä—É—á–Ω—É.');
            runMainScenario();
        }
    }

    /* ------------------------------------------------------------------
       ‚öôÔ∏è  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ¬´human-like¬ª –ø–∞—É–∑
    ------------------------------------------------------------------ */
    const config = {
        typingDelayMin: 50, typingDelayMax: 150, typingLongPauseChance: 0.12,
        typingLongPauseMin: 280, typingLongPauseMax: 800, preFieldDelayMin: 300,
        preFieldDelayMax: 800, postFieldDelayMin: 80, postFieldDelayMax: 200,
        longRestChance: 0.15, longRestMin: 600, longRestMax: 1800,
        delayedFieldJitterMin: 50, delayedFieldJitterMax: 250, waitForElementMaxAttempts: 50,
        waitForElementInterval: 200,
    };

    /* ------------------------------------------------------------------
       üèó  –£—Ç–∏–ª—ñ—Ç–∏
    ------------------------------------------------------------------ */
    const wait = (ms) => new Promise((r) => setTimeout(r, ms));

    function weightedRandomDelay(min, max) {
        const r = (Math.random() + Math.random()) / 2;
        return Math.round(min + (max - min) * r);
    }

    function triggerEvents(el) {
        el.dispatchEvent(new Event('input', { bubbles: true }));
        el.dispatchEvent(new Event('change', { bubbles: true }));
        el.dispatchEvent(new Event('blur', { bubbles: true }));
    }

    async function sendTelegramMessage(text) {
        try {
            const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
            await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode: 'HTML' }),
            });
        } catch (err) {
            console.error('‚ùå Telegram:', err);
        }
    }

    function waitForElement(id) {
        return new Promise((resolve) => {
            let attempts = 0;
            const int = setInterval(() => {
                if (isScriptStopped) {
                    clearInterval(int);
                    resolve(null);
                    return;
                }
                const el = document.getElementById(id);
                if (el) {
                    clearInterval(int);
                    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç: ${id}`);
                    resolve(el);
                } else if (++attempts >= config.waitForElementMaxAttempts) {
                    clearInterval(int);
                    console.warn(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç: ${id}`);
                    resolve(null);
                }
            }, config.waitForElementInterval);
        });
    }

    /* ------------------------------------------------------------------
       ‚å®Ô∏è  –ù–∞–±—ñ—Ä —Ç–µ–∫—Å—Ç—É ¬´–ø–æ-–ª—é–¥—Å—å–∫–∏¬ª
    ------------------------------------------------------------------ */
    async function typeValue(el, value) {
        if (isScriptStopped) return;
        el.value = '';
        triggerEvents(el);
        await wait(weightedRandomDelay(60, 140));

        for (const char of String(value)) {
            if (isScriptStopped) return;
            el.value += char;
            el.dispatchEvent(new Event('input', { bubbles: true }));
            await wait(weightedRandomDelay(config.typingDelayMin, config.typingDelayMax));
            if (Math.random() < config.typingLongPauseChance) {
                await wait(weightedRandomDelay(config.typingLongPauseMin, config.typingLongPauseMax));
            }
        }
        triggerEvents(el);
    }

    /* ------------------------------------------------------------------
       üñº  –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è CAPTCHA (GPT-4o Vision)
    ------------------------------------------------------------------ */
    async function imageToBase64(img) {
        return new Promise((res) => {
            const canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            res(canvas.toDataURL('image/png'));
        });
    }

    let skipSubmit = false;

    async function recognizeCaptcha(imageDataUrl) {
        if (isScriptStopped) return '1';
        console.log('üîç –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—á—ñ –≤ OpenAI‚Ä¶');

        for (const model of OPENAI_MODELS) {
            if (isScriptStopped) return '1';
            try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${OPENAI_API_KEY}`,
                        'OpenAI-Beta': 'assistants=v1',
                        'OpenAI-Project': OPENAI_PROJECT_ID,
                    },
                    body: JSON.stringify({
                        model: model,
                        messages: [{
                            role: 'user',
                            content: [
                                { type: 'text', text: 'Text: "Extract only the exact 5-character CAPTCHA code (a-z, 0-9). No explanations, no quotes, no extra text", it is only lowercase English letters and numbers are allowed.' },
                                { type: 'image_url', image_url: { url: imageDataUrl } },
                            ],
                        }],
                        max_tokens: 10,
                    }),
                });

                const result = await response.json();

                if (!response.ok) {
                    console.warn(`‚ö†Ô∏è –ú–æ–¥–µ–ª—å ${model} –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –ø–æ–º–∏–ª–∫—É:`, result);
                    continue;
                }

                console.log(`üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å OpenAI (${model}):`, result);
                console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${model} —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ —É—Å–ø—ñ—à–Ω–æ`);

                let captchaText = result?.choices?.[0]?.message?.content?.trim().toLowerCase().replace(/[^a-z0-9]/g, '');
                if (!captchaText || captchaText.length !== 5) {
                    console.warn(`‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI (${captchaText}). –ü—Ä–æ–±—É—é –Ω–∞—Å—Ç—É–ø–Ω—É –º–æ–¥–µ–ª—å.`);
                    continue; // –ü—Ä–æ–±—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –º–æ–¥–µ–ª—å
                } else {
                    skipSubmit = false;
                    return captchaText;
                }
            } catch (err) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ –º–æ–¥–µ–ª–ª—é ${model}:`, err);
            }
        }

        console.error('‚ùå –£—Å—ñ –º–æ–¥–µ–ª—ñ –Ω–µ –¥–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ü—Ä–æ–ø—É—Å–∫–∞—é –≤—ñ–¥–ø—Ä–∞–≤–∫—É.');
        skipSubmit = true;
        return 'error'; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∞—Ä–∫–µ—Ä –ø–æ–º–∏–ª–∫–∏
    }


    async function typeCaptchaLikeHuman(el, text) {
        if (isScriptStopped) return;
        el.focus();
        el.value = '';
        triggerEvents(el);

        for (const char of text) {
            if (isScriptStopped) return;
            el.dispatchEvent(new KeyboardEvent('keydown', { key: char, bubbles: true }));
            el.value += char;
            triggerEvents(el);
            await wait(weightedRandomDelay(90, 160));
        }

        triggerEvents(el);
        el.blur();
    }

    async function solveCaptcha() {
        if (isScriptStopped) return;
        const imgEl = await waitForElement('captchaImage');
        const inputEl = await waitForElement('answer');
        if (!imgEl || !inputEl) return;

        const base64 = await imageToBase64(imgEl);
        const text = await recognizeCaptcha(base64);
        if (text === 'error') {
             await reloadForNextCity('–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ CAPTCHA.');
             return;
        }
        await typeCaptchaLikeHuman(inputEl, text);
        inputEl.style.cssText = 'border:2px solid lime;background:#eaffea;';
        setTimeout(() => (inputEl.style.cssText = ''), 3000);
    }

    /* ------------------------------------------------------------------
       üóí  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤
    ------------------------------------------------------------------ */
    const step1Fields = [
        ['fs3-name-10', USER_NAME, 'text'],
        ['fs1-surname-10', USER_SURNAME, 'text'],
        ['fs7-date-of-birth0', USER_BIRTHDATE, 'date'],
        ['s41-delivery-phone-captcha', USER_PHONE, 'text'],
        ['email0', USER_EMAIL, 'text'],
    ];

    /* ------------------------------------------------------------------
       üîÑ  –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º—ñ—Å—Ç —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    ------------------------------------------------------------------ */

    /**
     * –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è —Å–ø—Ä–æ–±–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—Ç–∞ –∑—ñ —Å–ø–∏—Å–∫—É.
     * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è.
     */
    async function reloadForNextCity(reason) {
        console.log(`–ü—Ä–∏—á–∏–Ω–∞: ${reason}. –°–ø—Ä–æ–±–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—Ç–∞.`);
        currentCityIndex++;
        if (currentCityIndex >= USER_CITIES.length) {
            currentCityIndex = 0; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø–µ—Ä—à–æ–≥–æ –º—ñ—Å—Ç–∞
            console.log('--- –ü–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É –ø–µ—Ä–µ–±–æ—Ä—É –º—ñ—Å—Ç ---');
            await sendTelegramMessage('--- üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–±–æ—Ä—É –º—ñ—Å—Ç. –ü–æ—á–∏–Ω–∞—é –∑–Ω–æ–≤—É. ---');
        }
        localStorage.setItem('currentCityIndex', currentCityIndex);

        // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
        await wait(weightedRandomDelay(3000, 5000));
        location.reload();
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –¥–æ—Å—Ç—É–ø–Ω—ñ –º—ñ—Å—Ç–∞ –∑—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —ñ –¥—ñ—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
     */
    async function checkAvailableCitiesAndProceed() {
        if (isScriptStopped) return;
        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –º—ñ—Å—Ç...');
        await wait(2000); // –î–∞—î–º–æ —á–∞—Å –ø—Ä–æ–≥—Ä—É–∑–∏—Ç–∏—Å—å —Å–ø–∏—Å–∫—É

        const availableOfficeInputs = [...document.querySelectorAll('input[type="radio"][name="offices"]')];
        if (availableOfficeInputs.length === 0) {
            await reloadForNextCity('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ—Ñ—ñ—Å—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.');
            return;
        }

        const availableOfficeIds = availableOfficeInputs.map(input => input.id);
        console.log('üè¢ –î–æ—Å—Ç—É–ø–Ω—ñ –æ—Ñ—ñ—Å–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ:', availableOfficeIds);
        console.log('üë§ –í–∞—à—ñ –º—ñ—Å—Ç–∞:', USER_CITIES);

        const foundCity = USER_CITIES.some(userCity =>
            availableOfficeIds.some(officeId => officeId.startsWith(userCity))
        );

        if (foundCity) {
            console.log('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ –æ–¥–Ω–µ –∑ –≤–∞—à–∏—Ö –º—ñ—Å—Ç! –°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω—è—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.');
            await sendTelegramMessage('‚úÖ <b>–£—Å–ø—ñ—Ö!</b> –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–µ –º—ñ—Å—Ç–æ. –°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.');

            isScriptStopped = true;
            localStorage.setItem('isScriptStopped', 'true');
            const stopBtn = document.getElementById('stopScriptBtn');
            if (stopBtn) {
                stopBtn.textContent = '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏';
                stopBtn.style.backgroundColor = '#5cb85c';
            }
        } else {
            console.log('‚ùå –ñ–æ–¥–Ω–µ –∑ –≤–∞—à–∏—Ö –º—ñ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö.');
            await sendTelegramMessage(`- <b>${USER_CITY}</b>: –ù–µ–º–∞—î –º—ñ—Å—Ü—å.`);
            await reloadForNextCity('–ñ–æ–¥–Ω–µ –∑ –≤–∞—à–∏—Ö –º—ñ—Å—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–µ.');
        }
    }


    /* ------------------------------------------------------------------
       üöÄ  –û—Å–Ω–æ–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π
    ------------------------------------------------------------------ */
    async function runMainScenario() {
        if (isScriptStopped) {
            console.log('–°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –ó–∞–ø—É—Å–∫ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ.');
            return;
        }

        console.log(`üöÄ –°—Ç–∞—Ä—Ç –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è –º—ñ—Å—Ç–∞: ${USER_CITY}`);

        // --- –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –û—á–∏—â–µ–Ω–Ω—è –±—É—Ñ–µ—Ä–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ ---
        console.log('üßπ –û—á–∏—â–µ–Ω–Ω—è –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É —Ç–∞ –∑–∞–ø—É—Å–∫ 30-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.');
        try {
            await navigator.clipboard.writeText('');
        } catch (err) {
            console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É (–º–æ–∂–ª–∏–≤–æ, —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞).', err);
        }

        clipboardCheckTimeout = setTimeout(async () => {
            if (isScriptStopped) return;
            try {
                const clipboardText = await navigator.clipboard.readText();
                if (!clipboardText.trim()) {
                    console.warn('üïí –ß–µ—Ä–µ–∑ 30 —Å–µ–∫ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É –ø–æ—Ä–æ–∂–Ω—ñ–π. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏...');
                    await sendTelegramMessage('üïí <b>–ü–æ–º–∏–ª–∫–∞:</b> –ë—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É –ø–æ—Ä–æ–∂–Ω—ñ–π —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.');
                    location.reload();
                } else {
                    console.log('‚úÖ –ë—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω—ñ. –¢–∞–π–º–µ—Ä –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤.');
                }
            } catch (err) {
                console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –±—É—Ñ–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–π–º–µ—Ä–æ–º. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.', err);
                location.reload();
            }
        }, 30000); // 30 000 –º—Å = 30 —Å–µ–∫
        // -----------------------------------------------------------

        // 1Ô∏è‚É£ CAPTCHA
        await solveCaptcha();
        if (isScriptStopped || skipSubmit) return; // –ó—É–ø–∏–Ω—è—î–º–æ—Å—å, —è–∫—â–æ –∫–∞–ø—á–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞

        // 2Ô∏è‚É£ –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–µ—Ä—à–æ—ó —Ñ–æ—Ä–º–∏
        for (const [id, value, type] of step1Fields) {
             if (isScriptStopped) return;
             const el = await waitForElement(id);
             if (el) {
                 await typeValue(el, value);
             }
        }
        if (isScriptStopped) return;


        // 3Ô∏è‚É£ –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—Ä—É–≥–æ—ó —á–∞—Å—Ç–∏–Ω–∏ —Ñ–æ—Ä–º–∏
        if (!skipSubmit) {
            const btn = document.getElementById('loadSecondFormButton');
            if (btn) {
                btn.click();
                console.log('üöÄ "loadSecondFormButton" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
                await wait(2500);

                const captchaError = [...document.querySelectorAll('span, div')]
                    .find(el => el.textContent?.toLowerCase().includes('nespr√°vny k√≥d'));
                if (captchaError) {
                    console.warn('‚ùå –ö–∞–ø—á–∞ –Ω–µ–≤—ñ—Ä–Ω–∞.');
                    await reloadForNextCity('–ù–µ–≤—ñ—Ä–Ω–∞ CAPTCHA.');
                    return;
                }
            } else {
                console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ loadSecondFormButton –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
            }
        } else {
            console.warn('üö´ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–∞–ø—á—ñ –ø—Ä–æ–ø—É—â–µ–Ω–æ, –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞.');
            await reloadForNextCity('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è CAPTCHA.');
            return;
        }

        // 4Ô∏è‚É£ PIN-–∫–æ–¥ —Ç–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ–æ—Ä–º–∏
        const pinCodeEl = await waitForElement('pin-code');
        if (pinCodeEl) {
            console.log('‚è≥ –û—á—ñ–∫—É—é PIN-–∫–æ–¥ –≤ –±—É—Ñ–µ—Ä—ñ –æ–±–º—ñ–Ω—É...');
            let pin = '';
            // –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ PIN –ø—Ä–æ—Ç—è–≥–æ–º ~15 —Å–µ–∫—É–Ω–¥
            for (let i = 0; i < 30; i++) {
                if(isScriptStopped) return;
                const clipboardText = await navigator.clipboard.readText();
                if (clipboardText.trim().match(/^\d{4,8}$/)) {
                    pin = clipboardText.trim();
                    break;
                }
                await wait(500);
            }

            if (!pin) {
                 console.warn('‚ùå PIN-–∫–æ–¥ –Ω–µ –∑\'—è–≤–∏–≤—Å—è –≤ –±—É—Ñ–µ—Ä—ñ –æ–±–º—ñ–Ω—É.');
                 await reloadForNextCity('–¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è PIN-–∫–æ–¥—É.');
                 return;
            }

            // –Ø–∫—â–æ PIN –æ—Ç—Ä–∏–º–∞–Ω–æ, —Å–∫–∞—Å–æ–≤—É—î–º–æ —Ç–∞–π–º–µ—Ä
            clearTimeout(clipboardCheckTimeout);
            console.log('‚úÖ PIN –æ—Ç—Ä–∏–º–∞–Ω–æ, 30-—Å–µ–∫—É–Ω–¥–Ω–∏–π —Ç–∞–π–º–µ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');

            pinCodeEl.focus();
            await typeValue(pinCodeEl, pin);
            console.log(`üîê PIN –∑ –±—É—Ñ–µ—Ä–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ: ${pin}`);

            const submitBtn = document.getElementById('loadMain');
            if (submitBtn) {
                submitBtn.click();
                console.log('üöÄ "Odosla≈•" (PIN) –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
            }

            await wait(3150);
            if (isScriptStopped) return;

            // –í–∏–±—ñ—Ä –æ–ø—Ü—ñ–π —É —Å–µ–ª–µ–∫—Ç–∞—Ö
            const select1 = document.getElementById('f1-life-situation-select1');
            if (select1) {
                select1.value = STEP3_SELECT_1_VALUE;
                triggerEvents(select1);
                console.log('‚úÖ select1 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            }

            await wait(2260);
            if (isScriptStopped) return;

            const select2 = document.getElementById('f1-life-situation-select2');
            if (select2) {
                select2.value = STEP3_SELECT_2_VALUE;
                triggerEvents(select2);
                console.log('‚úÖ select2 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            }

            // 5Ô∏è‚É£ –§—ñ–Ω–∞–ª—å–Ω–∏–π –∫—Ä–æ–∫: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ç
            await checkAvailableCitiesAndProceed();

        } else {
            await reloadForNextCity('–ù–µ –∑\'—è–≤–∏–ª–æ—Å—è –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥—É PIN-–∫–æ–¥—É.');
        }
    }

    // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é
    runMainScenario();
})();
