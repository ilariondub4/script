// ==UserScript==
// @name         3113313131 main
// @namespace    Violentmonkey Scripts
// @match        https://portal.minv.sk/wps/portal/domov/ecu/ecu_elektronicke_sluzby/ecu-vysys/*
// @grant        none
// @version      1.5
// @author       -
// @description  Автоматичне заповнення форми MINV з Telegram, CAPTCHA, GPT-4o, DeepSeek, фіксованими ключами та UI для редагування.
// @run-at       document-end
// ==/UserScript==

(function () {
  'use strict';

  const USER_NAME = localStorage.getItem('USER_NAME') || 'Larysa';
  const USER_SURNAME = localStorage.getItem('USER_SURNAME') || 'Shevchuk';
  const USER_BIRTHDATE = localStorage.getItem('USER_BIRTHDATE') || '30.03.1988';
  const USER_PHONE = localStorage.getItem('USER_PHONE') || '+421940792910';
  const USER_EMAIL = localStorage.getItem('USER_EMAIL') || 'ivanikrakusinko1a1a14@gmail.com';
  const USER_CITY = localStorage.getItem('USER_CITY') || 'OCP Ružomberok';
  const USER_PASSPORT = 'T';
  const STEP3_SELECT_1_VALUE = localStorage.getItem('STEP3_SELECT_1_VALUE') || '218';
  const STEP3_SELECT_2_VALUE = localStorage.getItem('STEP3_SELECT_2_VALUE') || '224';

  const OPENAI_MODELS = ['gpt-4o', 'gpt-4.1', 'gpt-4.1-mini', 'gpt-4'];
  const OPENAI_API_KEY = localStorage.getItem('OPENAI_API_KEY') || '';
  const OPENAI_PROJECT_ID = localStorage.getItem('OPENAI_PROJECT_ID') || '';
  const TELEGRAM_BOT_TOKEN = localStorage.getItem('TELEGRAM_BOT_TOKEN') || '';
  const TELEGRAM_CHAT_ID = localStorage.getItem('TELEGRAM_CHAT_ID') || '';
  const DEEPSEEK_MODELS = ['deepseek-chat', 'deepseek-coder'];

  window.addEventListener('load', () => {
    const btn = document.createElement('button');
    btn.textContent = '⚙️ Налаштування';
    btn.style = 'position:fixed;top:20px;right:20px;z-index:9999;padding:8px 12px;background:#333;color:white;border:none;border-radius:5px;cursor:pointer;';
    btn.onclick = openSettingsModal;
    document.body.appendChild(btn);
  });

  window.openSettingsModal = function () {
    const html = `
      <div id="settingsModal" style="position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:9999;display:flex;align-items:center;justify-content:center;">
        <div style="background:white;padding:20px;border-radius:8px;max-width:500px;width:100%;max-height:90vh;overflow:auto;">
          <h2 style="margin-top:0;">⚙️ Налаштування</h2>
          <label>👤 Ім’я: <input id="set_name" value="${USER_NAME}" /></label><br/><br/>
          <label>👤 Прізвище: <input id="set_surname" value="${USER_SURNAME}" /></label><br/><br/>
          <label>🎂 Дата нар.: <input id="set_birth" value="${USER_BIRTHDATE}" /></label><br/><br/>
          <label>📞 Тел.: <input id="set_phone" value="${USER_PHONE}" /></label><br/><br/>
          <label>📧 Email: <input id="set_email" value="${USER_EMAIL}" /></label><br/><br/>
          <label>🟦 Місто:
            <select id="set_city">
              ${['Banská Bystrica','Bratislava','Dunajská Streda','Košice','Michalovce','Nitra','Nové Zámky','Prešov','Rimavská Sobota','Ružomberok','Trenčín','Trnava','Žilina'].map(city => `<option${USER_CITY === 'OCP ' + city ? ' selected' : ''}>OCP ${city}</option>`).join('')}
            </select>
          </label><br/><br/>
          <label>📋 Тип:
            <select id="set_type">
              ${[
                ['213', '228', 'Doklady / pasy – Žiadosť o vydanie dokladu o pobyte'],
                ['242', '243', 'Dočasné útočisko – Registrácia dočasného útočiska'],
                ['242', '250', 'Dočasné útočisko – Žiadosť o vydanie dokladu o pobyte'],
                ['216', '225', 'Prechodný pobyt – Žiadosť o udelenie prechodného pobytu'],
                ['216', '226', 'Prechodný pobyt – Žiadosť o obnovenie prechodného pobytu'],
                ['216', '249', 'Prechodný pobyt – Podnikanie - udelenie'],
                ['216', '240', 'Prechodný pobyt – Rodina - udelenie'],
                ['216', '241', 'Prechodný pobyt – Rodina - obnova'],
                ['216', '244', 'Prechodný pobyt – Zamestnanie - udelenie'],
                ['216', '245', 'Prechodný pobyt – Zamestnanie - obnova'],
                ['218', '224', 'Trvalý pobyt – neobmedzený čas'],
                ['218', '223', 'Trvalý pobyt – на 5 rokov']
              ].map(([v1, v2, label]) => `<option value="${v1}|${v2}"${STEP3_SELECT_1_VALUE === v1 && STEP3_SELECT_2_VALUE === v2 ? ' selected' : ''}>${label} (${v1} → ${v2})</option>`).join('')}
            </select>
          </label><br/><br/>
          <label>🧠 OpenAI API: <input id="set_openai" value="${OPENAI_API_KEY}" /></label><br/><br/>
          <label>🧠 OpenAI Project: <input id="set_openai_proj" value="${OPENAI_PROJECT_ID}" /></label><br/><br/>
          <label>📬 TG Token: <input id="set_tg_token" value="${TELEGRAM_BOT_TOKEN}" /></label><br/><br/>
          <label>📬 TG Chat ID: <input id="set_tg_chat" value="${TELEGRAM_CHAT_ID}" /></label><br/><br/>
          <button onclick="saveSettings()">💾 Зберегти</button>
          <button onclick="document.getElementById('settingsModal').remove()">❌ Закрити</button>
        </div>
      </div>
    `;
    const modal = document.createElement('div');
    modal.innerHTML = html;
    document.body.appendChild(modal);
  }

  window.saveSettings = function () {
    localStorage.setItem('USER_NAME', document.getElementById('set_name').value);
    localStorage.setItem('USER_SURNAME', document.getElementById('set_surname').value);
    localStorage.setItem('USER_BIRTHDATE', document.getElementById('set_birth').value);
    localStorage.setItem('USER_PHONE', document.getElementById('set_phone').value);
    localStorage.setItem('USER_EMAIL', document.getElementById('set_email').value);
    localStorage.setItem('USER_CITY', document.getElementById('set_city').value);

    const [v1, v2] = document.getElementById('set_type').value.split('|');
    localStorage.setItem('STEP3_SELECT_1_VALUE', v1);
    localStorage.setItem('STEP3_SELECT_2_VALUE', v2);

    localStorage.setItem('OPENAI_API_KEY', document.getElementById('set_openai').value);
    localStorage.setItem('OPENAI_PROJECT_ID', document.getElementById('set_openai_proj').value);
    localStorage.setItem('TELEGRAM_BOT_TOKEN', document.getElementById('set_tg_token').value);
    localStorage.setItem('TELEGRAM_CHAT_ID', document.getElementById('set_tg_chat').value);
    alert('✅ Збережено! Перезавантажте сторінку');
  }



  /* ------------------------------------------------------------------
     ⚙️  Налаштування «human-like» пауз
  ------------------------------------------------------------------ */
  const config = {
    // між натисканнями клавіш
    typingDelayMin: 50,
    typingDelayMax: 150,
    typingLongPauseChance: 0.12, // 12 % шанс «задуматись»
    typingLongPauseMin: 280,
    typingLongPauseMax: 800,

    // перед / після поля
    preFieldDelayMin: 300,
    preFieldDelayMax: 800,
    postFieldDelayMin: 80,
    postFieldDelayMax: 200,

    // шанс великої паузи після поля
    longRestChance: 0.15,
    longRestMin: 600,
    longRestMax: 1800,

    // «джиттер» для відкладених полів
    delayedFieldJitterMin: 50,
    delayedFieldJitterMax: 250,

    // очікування DOM-елемента
    waitForElementMaxAttempts: 50,
    waitForElementInterval: 200,
  };

  /* ------------------------------------------------------------------
     🏗  Утиліти
  ------------------------------------------------------------------ */
  const wait = (ms) => new Promise((r) => setTimeout(r, ms));

  // Псевдо-гаусовий (triangular) розподіл: більшість значень ближче до середини
  function weightedRandomDelay(min, max) {
    const r = (Math.random() + Math.random()) / 2; // 0–1  пік ≈0.5
    return Math.round(min + (max - min) * r);
  }



  let lastMessageId = 0;

async function checkTelegram() {
  try {
    console.log('🔁 Перевірка повідомлень Telegram…');

    const res = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates`);
    const data = await res.json();

    if (!data.ok) {
      console.warn('⚠️ Telegram API повернув помилку:', data);
      return;
    }

    if (data.result.length === 0) {
      console.log('📭 Повідомлень немає');
      return;
    }

    const lastMsg = data.result[data.result.length - 1];

    if (lastMsg.update_id <= lastMessageId) {
      console.log('🔂 Немає нового повідомлення (update_id вже оброблено)');
      return;
    }

    lastMessageId = lastMsg.update_id;
    console.log('📨 Нове повідомлення:', lastMsg.message?.text || '(без тексту)');

    console.log('🕵️‍♂️ Очікування появи select2 в DOM…');
    let select2 = null;
    for (let i = 0; i < 120; i++) { // 30 сек = 120 x 250мс
      select2 = document.getElementById('f1-life-situation-select2');
      if (select2) {
        console.log('✅ Знайдено select2');
        break;
      }
      await wait(250);
    }

    if (!select2) {
      console.warn('❌ select2 не знайдено після очікування');
      return;
    }

    const option = select2.querySelector(`option[value="${STEP3_SELECT_2_VALUE}"]`);
    if (!option) {
      console.warn(`❌ Опція ${STEP3_SELECT_2_VALUE} не знайдена`);
      return;
    }

    option.setAttribute('selected', 'selected');
    triggerEvents(select2);
    console.log(`✅ select2 встановлено на ${STEP3_SELECT_2_VALUE}`);

  } catch (err) {
    console.error("❌ Помилка у checkTelegram:", err);
  }
}
  // 🔁 Перевіряє кожні 15 секунд
function startTelegramLoop() {
  checkTelegram().finally(() => {
    setTimeout(startTelegramLoop, 2000); // 🔁 кожні 2 сек
  });
}



  // Рівномірний (залишив для сумісності)
  function randomDelay(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function triggerEvents(el) {
    el.dispatchEvent(new Event('input', { bubbles: true }));
    el.dispatchEvent(new Event('change', { bubbles: true }));
    el.dispatchEvent(new Event('blur', { bubbles: true }));
  }

  async function sendTelegramMessage(text) {
    try {
      const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
      await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode: 'HTML' }),
      });
    } catch (err) {
      console.error('❌ Telegram:', err);
    }
  }

  /* ------------------------------------------------------------------
     📖  Очікування елемента в DOM
  ------------------------------------------------------------------ */
  function waitForElement(id) {
    return new Promise((resolve) => {
      let attempts = 0;
      const int = setInterval(() => {
        const el = document.getElementById(id);
        if (el) {
          clearInterval(int);
          console.log(`✅ Знайдено елемент: ${id}`);
          resolve(el);
        } else if (++attempts >= config.waitForElementMaxAttempts) {
          clearInterval(int);
          console.warn(`❌ Не знайдено елемент: ${id}`);
          resolve(null);
        }
      }, config.waitForElementInterval);
    });
  }

  /* ------------------------------------------------------------------
     ⌨️  Набір тексту «по-людськи»
  ------------------------------------------------------------------ */
  async function typeValue(el, value) {
    el.value = '';
    triggerEvents(el);
    await wait(weightedRandomDelay(60, 140));

    for (const char of String(value)) {
      el.value += char;
      el.dispatchEvent(new Event('input', { bubbles: true }));
      await wait(weightedRandomDelay(config.typingDelayMin, config.typingDelayMax));
      if (Math.random() < config.typingLongPauseChance) {
        await wait(weightedRandomDelay(config.typingLongPauseMin, config.typingLongPauseMax));
      }
    }
    triggerEvents(el);
  }

  /* ------------------------------------------------------------------
     🖼  Розпізнавання CAPTCHA (GPT-4o Vision)
  ------------------------------------------------------------------ */
  async function imageToBase64(img) {
    return new Promise((res) => {
      const canvas = document.createElement('canvas');
      canvas.width = img.width;
      canvas.height = img.height;
      const ctx = canvas.getContext('2d');
      ctx.drawImage(img, 0, 0);
      res(canvas.toDataURL('image/png'));
    });
  }

 let skipSubmit = false;


async function recognizeCaptcha(imageDataUrl) {
  console.log('🔍 Відправка капчі в OpenAI…');

  for (const model of OPENAI_MODELS) {
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v1',
          'OpenAI-Project': OPENAI_PROJECT_ID,
        },
        body: JSON.stringify({
          model: model,
          messages: [
            {
              role: 'user',
              content: [
                {
                  type: 'text',
                  text: 'Text: "Extract only the exact 5-character CAPTCHA code (a-z, 0-9). No explanations, no quotes, no extra text", it is only lowercase English letters and numbers are allowed.',
                },
                {
                  type: 'image_url',
                  image_url: { url: imageDataUrl },
                },
              ],
            },
          ],
          max_tokens: 10,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        console.warn(`⚠️ Модель ${model} повернула помилку:`, result);
        continue; // пробуємо наступну модель
      }

      console.log(`📩 Відповідь OpenAI (${model}):`, result);
      console.log(`✅ Модель ${model} спрацювала успішно`);

      let captchaText = result?.choices?.[0]?.message?.content?.trim();
      if (!captchaText || captchaText.length !== 5) {
        console.warn(`⚠️ Невірна відповідь AI (${captchaText}). Викор. "1"`);
        skipSubmit = true;
        return '1';
      } else {
        skipSubmit = false;
        return captchaText;
      }

    } catch (err) {
      console.error(`❌ Помилка з моделлю ${model}:`, err);
      // пробуємо наступну модель
    }
  }

  console.error('❌ Усі моделі не дали відповіді. Повертаємо "1"');
  skipSubmit = true;
  return '1';
}

  async function typeCaptchaLikeHuman(el, text) {
  el.focus();
  el.value = '';
  triggerEvents(el);

  for (const char of text) {
    el.dispatchEvent(new KeyboardEvent('keydown', { key: char, bubbles: true }));
    el.value += char;
    triggerEvents(el);
    await wait(weightedRandomDelay(90, 160));
  }

  triggerEvents(el);
  el.blur();
}

  async function solveCaptcha() {
    const imgEl = await waitForElement('captchaImage');
    const inputEl = await waitForElement('answer');
    if (!imgEl || !inputEl) return;

    const base64 = await imageToBase64(imgEl);
    const text = await recognizeCaptcha(base64);
    await typeCaptchaLikeHuman(inputEl, text);
    inputEl.style.cssText = 'border:2px solid lime;background:#eaffea;';
    setTimeout(() => (inputEl.style.cssText = ''), 3000);
  }

  /* ------------------------------------------------------------------
     🗒  Налаштування полів
  ------------------------------------------------------------------ */
  const delayedFields = {
    'residence-address-county-0': 2000,
    'residence-address-municipality-0': 2000,
    'residence-address-street-0': 2000,
    'fs13-0-travel-doc-type': 500,
    's42-check-gdpr-info': 1000,
    submitter1: 650,
  };

  const step1Fields = [
    ['fs3-name-10', USER_NAME, 'text'],
    ['fs1-surname-10', USER_SURNAME, 'text'],
    [
      'fs7-date-of-birth0',
      async (el) => {
        el.focus();
        await wait(120);
        el.value = USER_BIRTHDATE;
        triggerEvents(el);
        await wait(240);
        // повернення курсора і видалення крапок (ориг. логіка)
        for (let i = 0; i < 10; i++) {
          el.dispatchEvent(new KeyboardEvent('keydown', { key: 'ArrowLeft', bubbles: true }));
          el.dispatchEvent(new KeyboardEvent('keyup', { key: 'ArrowLeft', bubbles: true }));
          await wait(50);
        }
        for (let i = 0; i < 2; i++) {
          el.dispatchEvent(new KeyboardEvent('keydown', { key: 'Delete', bubbles: true }));
          el.dispatchEvent(new KeyboardEvent('keyup', { key: 'Delete', bubbles: true }));
          await wait(50);
        }
        triggerEvents(el);
      },
      'custom',
    ],
    ['s41-delivery-phone-captcha', USER_PHONE, 'text'],
    ['email0', USER_EMAIL, 'text'],
//    ['loadSecondFormButton', (el) => el.click(), 'custom'],
  ];

  const step2Fields = [
    [USER_CITY, true, 'radio'],
    ['s42-check-gdpr-info', true, 'checkbox'],
    ['fs13-0-travel-doc-type', '1', 'select'],
    ['fs13-travel-doc-number', USER_PASSPORT, 'text'],
    ['submitter1', null, 'click'],
  ];

  /* ------------------------------------------------------------------
     🔄  Заповнення полів (human-like)
  ------------------------------------------------------------------ */
  async function fillFields(fields, label) {
    for (const [id, value, type] of fields) {
      let el = document.getElementById(id);
      if (!el && type === 'radio') {
        el = [...document.querySelectorAll('input[type="radio"][name="offices"]')].find(
          (n) => n.id && n.id.startsWith(id),
        );
        if (el) {
                   const matchingSlot = [
             ...document.querySelectorAll('input[type="radio"][name="offices"]')
           ].find(el =>
             el.id &&
             el.id.includes(`${USER_CITY} -`) &&  // ← місто + пробіл + «-»
             el.offsetParent !== null &&
             !el.disabled
           );
           const now = new Date().toLocaleString();
           const msg = `🕒 ${now}\n🆔 ${matchingSlot.id}\n➡️ ${STEP3_SELECT_1_VALUE} --> ${STEP3_SELECT_2_VALUE}`;
          console.log(msg);
          await sendTelegramMessage(msg); // 🔔 надсилання в Telegram
        }
      }
      if (!el) continue;

      const preDelay = delayedFields[id]
        ? delayedFields[id] + randomDelay(config.delayedFieldJitterMin, config.delayedFieldJitterMax)
        : weightedRandomDelay(config.preFieldDelayMin, config.preFieldDelayMax);
      await wait(preDelay);
      el.focus();
      await wait(weightedRandomDelay(50, 180));

      try {
        switch (type) {
          case 'text':
            await typeValue(el, value);
            break;
          case 'select':
            el.value = value;
            triggerEvents(el);
            break;
          case 'checkbox':
            el.checked = Boolean(value);
            triggerEvents(el);
            break;
          case 'click':
            el.click();
            break;
          case 'custom':
            await value(el);
            break;
          case 'radio':
            el.checked = true;
            triggerEvents(el);
            break;
        }
      } catch (e) {
        console.error(`[${label}] ${id}:`, e);
      }

      await wait(weightedRandomDelay(config.postFieldDelayMin, config.postFieldDelayMax));
      if (Math.random() < config.longRestChance) {
        await wait(weightedRandomDelay(config.longRestMin, config.longRestMax));
      }
    }
  }

  /* ------------------------------------------------------------------
     🚀  Основний сценарій
  ------------------------------------------------------------------ */
  (async () => {
    console.log('🚀 Старт автозаповнення');

  // Очищення буфера обміну після вставлення
await navigator.clipboard.writeText('');
console.log('🧹 Буфер очищено після вставлення PIN');



    await wait(weightedRandomDelay(800, 1500));
  // 🔘 Натискання loadSecondFormButton одразу на старті
const btn = await waitForElement('langSK');
if (btn) {
  btn.click();
  console.log('🚀 "loadSecondFormButton" натиснуто');

// 🕒 Через 60 сек перевірка буфера обміну
setTimeout(async () => {
  try {
    const clipboard = await navigator.clipboard.readText();
    if (!clipboard.trim()) {
      console.warn('🕒 Через 30 сек буфер обміну порожній. Перезавантаження...');
      location.reload();
    } else {
      console.log('✅ Буфер обміну НЕ порожній. Не перезавантажуємо.');
    }
  } catch (err) {
    console.error('⚠️ Помилка при читанні буфера:', err);
  }
}, 60000); // 60 000 мс = 60 сек

  await wait(2500); // даємо час з'явитися повідомленню про помилку
const captchaError = [...document.querySelectorAll('span, div')]
  .find(el => el.textContent?.toLowerCase().includes('nesprávny kód') || el.textContent?.toLowerCase().includes('nesprávne'));

if (captchaError) {
  console.warn('❌ Капча невірна. Перезавантаження...');
  setTimeout(() => location.reload(), 3000); // даємо 3 сек і перезавантажуємо
  return;
}


} else {
  console.warn('❌ Кнопка loadSecondFormButton не знайдена навіть після очікування');
}
  await wait(2239); // даємо час після кліку
    // 1️⃣ CAPTCHA
    await solveCaptcha();


    // 2️⃣ Step 1
    await fillFields(step1Fields, 'Step 1');
if (!skipSubmit) {
  const btn = document.getElementById('loadSecondFormButton');
  if (btn) {
    btn.click();
    console.log('🚀 "loadSecondFormButton" натиснуто');
    await wait(2500); // даємо час з'явитися повідомленню про помилку

const captchaError = [...document.querySelectorAll('span, div')]
  .find(el => el.textContent?.toLowerCase().includes('nesprávny kód') || el.textContent?.toLowerCase().includes('nesprávne'));


  } else {
    console.warn('❌ Кнопка loadSecondFormButton не знайдена');
  }
} else {
  console.warn('🚫 Капча невірна. Кнопка не натиснута');
}
    // 3️⃣ Чекаємо селект міст
    const triggerStep2Button = await waitForElement('f1-life-situation-select2');
    if (!triggerStep2Button) {
      console.error('❌ select для міст не знайдено');
      return;
    }

    triggerStep2Button.addEventListener(
      'change',
      async () => {
        await wait(weightedRandomDelay(1700, 2500));
       await fillFields(step2Fields, 'Step 2');
       const submitBtn = document.getElementById('submitter1');
       if (submitBtn) {
         submitBtn.click();
         console.log('🚀 "Надіслати" натиснуто');
       }
        console.log('✅ Step 2 завершено');

        await wait(1546);

        // шукаємо перший доступний слот у потрібному місті
        // const matchingSlot = [...document.querySelectorAll('input[type="radio"][name="offices"]')].find(
        //   (el) =>
        //     el.id &&
        //     el.id.includes(USER_CITY) &&
        //     el.offsetParent !== null &&
        //     !el.disabled,
        // );

 const allAvailableSlots = [
  ...document.querySelectorAll('input[type="radio"][name="offices"]')
].filter(el =>
  el.id &&
  el.id.includes(' -') &&
  el.offsetParent !== null &&
  !el.disabled
);

const matchingSlot = allAvailableSlots.find(el =>
  el.id.includes(`${USER_CITY} -`)
);

if (matchingSlot) {
  matchingSlot.click();
  console.log('✅ Обрано слот:', matchingSlot.id);

  const now = new Date().toLocaleString();
  const msg = `🟢 ${now}\n✅ Знайдено в нашому місті:\n${matchingSlot.id}\n➡️ ${STEP3_SELECT_1_VALUE} → ${STEP3_SELECT_2_VALUE}`;
  await sendTelegramMessage(msg);

} else {
  const now = new Date().toLocaleString();

  if (allAvailableSlots.length > 0) {
const msg = `🟡 ${now}\n✔️ Знайдено хоча б один термін (не наше місто):\n${allAvailableSlots[0].id}\n➡️ ${STEP3_SELECT_1_VALUE} → ${STEP3_SELECT_2_VALUE}`;
    await sendTelegramMessage(msg);
  } else {
    console.log('❌ Жодного доступного терміну не знайдено');
  }

  const reloadIn = Math.floor(Math.random() * (18000 - 12000 + 1)) + 12000;
  console.log(`🔄 Перезавантаження через ${reloadIn / 1000} с`);
  setTimeout(() => location.reload(), reloadIn);
}
      },
      { once: true },
    );

    // 4️⃣ PIN-код → довантажуємо selects
let odoslatClicked = false;

const loadSecondFormBtn = await waitForElement('loadSecondFormButton');
if (loadSecondFormBtn) {
  loadSecondFormBtn.addEventListener('click', () => {
    odoslatClicked = true;
  });
}

async function waitForPINConditions() {
  while (!odoslatClicked && skipSubmit) {
    await wait(500); // чекати, поки або AI не помилиться, або ти не натиснеш кнопку
  }
}

await waitForPINConditions();

const pinCodeEl = await waitForElement('pin-code');
if (pinCodeEl) {
  await wait(10500);
  try {
    const clipboard = await navigator.clipboard.readText();
    const pin = clipboard.trim();
    if (!/^\d{4,8}$/.test(pin)) {
      console.warn('⚠️ PIN з буфера не схожий на код:', pin);
    }
    pinCodeEl.focus();
 await typeValue(pinCodeEl, pin);
console.log(`🔐 PIN з буфера вставлено: ${pin}`);



const submitBtn = document.getElementById('loadMain');
if (submitBtn) {
  submitBtn.click();
  console.log('🚀 "Odoslať" натиснуто');
}

    await wait(3150);

    const select1 = document.getElementById('f1-life-situation-select1');
    const option1 = select1?.querySelector(`option[value="${STEP3_SELECT_1_VALUE}"]`);
    if (option1) {
      option1.setAttribute('selected', 'selected');
      triggerEvents(select1);
      console.log('✅ select1 встановлено');
    }

    await wait(2260);

    const select2 = document.getElementById('f1-life-situation-select2');
    const option2 = select2?.querySelector(`option[value="${STEP3_SELECT_2_VALUE}"]`);
    if (option2) {
      option2.setAttribute('selected', 'selected');
      triggerEvents(select2);
      console.log('✅ select2 встановлено');
    }

  } catch (err) {
    console.error('❌ Помилка з PIN-кодом:', err);
  }
}

    console.log('📝 Очікування вибору міста…');
  })();
})();
