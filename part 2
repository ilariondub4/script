function saveConfigToLocalStorage(config) {
    localStorage.setItem('USER_NAME', config.USER_NAME || '');
    localStorage.setItem('USER_SURNAME', config.USER_SURNAME || '');
    localStorage.setItem('USER_BIRTHDATE', config.USER_BIRTHDATE || '');
    localStorage.setItem('USER_PHONE', config.USER_PHONE || '');
    localStorage.setItem('USER_EMAIL', config.USER_EMAIL || '');
    localStorage.setItem('USER_CITIES', JSON.stringify(config.USER_CITIES || []));
    localStorage.setItem('STEP3_SELECT_1_VALUE', config.STEP3_SELECT_1_VALUE || '');
    localStorage.setItem('STEP3_SELECT_2_VALUE', config.STEP3_SELECT_2_VALUE || '');
    // –ö–ª—é—á—ñ API —Ç–µ–∂ –º–æ–∂–Ω–∞ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏, —è–∫—â–æ –≤–æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç—å –∑ —Å–µ—Ä–≤–µ—Ä–∞
    if (config.OPENAI_API_KEY) localStorage.setItem('OPENAI_API_KEY', config.OPENAI_API_KEY);
    if (config.OPENAI_PROJECT_ID) localStorage.setItem('OPENAI_PROJECT_ID', config.OPENAI_PROJECT_ID);
    if (config.TELEGRAM_BOT_TOKEN) localStorage.setItem('TELEGRAM_BOT_TOKEN', config.TELEGRAM_BOT_TOKEN);
    if (config.TELEGRAM_CHAT_ID) localStorage.setItem('TELEGRAM_CHAT_ID', config.TELEGRAM_CHAT_ID);

    // –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
    localStorage.setItem('userConfigBackup', JSON.stringify(config));
}


async function fetchConfigFromServer(id) {
    try {
        const res2 = await fetch(`${BASE_URL}/api/config/${id}`, { cache: "no-store" });
        if (!res2.ok) throw new Error("Server error " + res2.status);
        const data = await res2.json();
        if (!data.USER_NAME || !data.USER_SURNAME) throw new Error("Broken config");
        saveConfigToLocalStorage(data);
        return data;
    } catch (e) {
        console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:', e.message);
        return null;
    }
}

async function getUserConfig(id) {
    // let cfg = await fetchConfigFromServer(id);
    // cfg = cfg || JSON.parse(localStorage.getItem('userConfigBackup') || '{}');

      const enabled = await isDeviceEnabled(id);
    let cfg = null;

    if (enabled) {
        cfg = await fetchConfigFromServer(id);
        if (cfg) {
            localStorage.setItem('userConfigBackup', JSON.stringify(cfg));
        } else {
            cfg = JSON.parse(localStorage.getItem('userConfigBackup') || '{}');
        }
    } else {
        console.warn(`‚õî –ü—Ä–∏—Å—Ç—Ä—ñ–π ${id} –≤–∏–º–∫–Ω–µ–Ω–∏–π ‚Äî –∫–æ–Ω—Ñ—ñ–≥ –±–µ—Ä–µ–º–æ –∑ localStorage –∞–±–æ –¥–µ—Ñ–æ–ª—Ç—ñ–≤`);
        cfg = JSON.parse(localStorage.getItem('userConfigBackup') || '{}');
    }

 return {
    USER_NAME: localStorage.getItem('USER_NAME') || cfg.USER_NAME || DEFAULT_USER_NAME,
    USER_SURNAME: localStorage.getItem('USER_SURNAME') || cfg.USER_SURNAME || DEFAULT_USER_SURNAME,
    USER_BIRTHDATE: localStorage.getItem('USER_BIRTHDATE') || cfg.USER_BIRTHDATE || DEFAULT_USER_BIRTHDATE,
    USER_PHONE: localStorage.getItem('USER_PHONE') || cfg.USER_PHONE || DEFAULT_USER_PHONE,
    USER_EMAIL: localStorage.getItem('USER_EMAIL') || cfg.USER_EMAIL || DEFAULT_USER_EMAIL,
    USER_CITIES: JSON.parse(localStorage.getItem('USER_CITIES') || JSON.stringify(cfg.USER_CITIES || DEFAULT_USER_CITIES)),
    STEP3_SELECT_1_VALUE: localStorage.getItem('STEP3_SELECT_1_VALUE') || cfg.STEP3_SELECT_1_VALUE || DEFAULT_STEP3_SELECT_1_VALUE,
    STEP3_SELECT_2_VALUE: localStorage.getItem('STEP3_SELECT_2_VALUE') || cfg.STEP3_SELECT_2_VALUE || DEFAULT_STEP3_SELECT_2_VALUE,
    // --- –ö–ª—é—á—ñ ---
    OPENAI_API_KEY: localStorage.getItem('OPENAI_API_KEY') || DEFAULT_OPENAI_API_KEY,
    OPENAI_PROJECT_ID: localStorage.getItem('OPENAI_PROJECT_ID') || DEFAULT_OPENAI_PROJECT_ID,
    TELEGRAM_BOT_TOKEN: localStorage.getItem('TELEGRAM_BOT_TOKEN') || DEFAULT_TELEGRAM_BOT_TOKEN,
    TELEGRAM_CHAT_ID: localStorage.getItem('TELEGRAM_CHAT_ID') || DEFAULT_TELEGRAM_CHAT_ID,
};
}





async function confirmLoadServerConfig(timeout = 3000) {
    return new Promise((resolve) => {
        const box = document.createElement('div');
        box.innerHTML = `
            <div style="position:fixed;top:40%;left:50%;transform:translate(-50%,-50%);z-index:99999;background:#fff;padding:22px 32px;border-radius:14px;box-shadow:0 8px 36px rgba(0,0,0,0.16);text-align:center;">
                <h2>–í–∑—è—Ç–∏ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞?</h2>
                <p>–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å <b>–¢–∞–∫</b> –ø—Ä–æ—Ç—è–≥–æ–º 5 —Å–µ–∫—É–Ω–¥.<br>–Ü–Ω–∞–∫—à–µ —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å—Å—è –∑ localStorage.</p>
                <button id="server_yes" style="padding:8px 24px;margin-right:18px;background:#4caf50;color:#fff;border:none;border-radius:6px;cursor:pointer;font-size:1.1em;">–¢–∞–∫</button>
            </div>
        `;
        document.body.appendChild(box);

        let resolved = false;
        document.getElementById('server_yes').onclick = () => {
            resolved = true;
            box.remove();
            resolve(true);
        };

        setTimeout(() => {
            if (!resolved) {
                box.remove();
                resolve(false);
            }
        }, timeout);
    });
}


(async function () {
    'use strict';


    window.addEventListener('load', () => {
        const btn = document.createElement('button');
        btn.textContent = '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è';
        btn.style = 'position:fixed;top:20px;right:20px;z-index:9999;padding:8px 12px;background:#333;color:white;border:none;border-radius:5px;cursor:pointer;';
        btn.onclick = openSettingsModal;
        document.body.appendChild(btn);

        const stopBtn = document.createElement('button');
        stopBtn.id = 'stopScriptBtn';
        stopBtn.textContent = isScriptStopped ? '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' : '‚è∏Ô∏è –°—Ç–æ–ø';
        stopBtn.style = 'position:fixed;top:60px;right:20px;z-index:9999;padding:8px 12px;background:#d9534f;color:white;border:none;border-radius:5px;cursor:pointer;';
        if (isScriptStopped) {
            stopBtn.style.backgroundColor = '#5cb85c'; // –ó–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏"
        }
        stopBtn.onclick = toggleScriptStop;
        document.body.appendChild(stopBtn);
    });

    window.openSettingsModal = function () {
        const html = `
            <div id="settingsModal" style="position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:9999;display:flex;align-items:center;justify-content:center;">
                <div style="background:white;padding:20px;border-radius:8px;max-width:500px;width:100%;max-height:90vh;overflow:auto;">
                    <h2 style="margin-top:0;">‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h2>
                    <label>üë§ –Ü–º‚Äô—è: <input id="set_name" value="${USER_NAME}" /></label><br/><br/>
                    <label>üë§ –ü—Ä—ñ–∑–≤–∏—â–µ: <input id="set_surname" value="${USER_SURNAME}" /></label><br/><br/>
                    <label>üéÇ –î–∞—Ç–∞ –Ω–∞—Ä.: <input id="set_birth" value="${USER_BIRTHDATE}" /></label><br/><br/>
                    <label>üìû –¢–µ–ª.: <input id="set_phone" value="${USER_PHONE}" /></label><br/><br/>
                    <label>üìß Email: <input id="set_email" value="${USER_EMAIL}" /></label><br/><br/>
<label>üü¶ –ú—ñ—Å—Ç–∞:</label><br/>
<div id="set_cities_container" style="max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px;">
    ${availableCities.map(city => `
        <label style="display: block; margin-bottom: 5px;">
            <input type="checkbox" class="city-checkbox" value="OCP ${city}" ${USER_CITIES.includes('OCP ' + city) ? 'checked' : ''}>
            OCP ${city}
        </label>
    `).join('')}
</div>
<br/>
                    <label>üìã –¢–∏–ø:
                        <select id="set_type">
                            ${[
                                ['213', '228', 'Doklady / pasy ‚Äì ≈Ωiados≈• o vydanie dokladu o pobyte'],
                                ['242', '243', 'Doƒçasn√© √∫toƒçisko ‚Äì Registr√°cia doƒçasn√©ho √∫toƒçiska'],
                                ['242', '250', 'Doƒçasn√© √∫toƒçisko ‚Äì ≈Ωiados≈• o vydanie dokladu o pobyte'],
                                ['216', '225', 'Prechodn√Ω pobyt ‚Äì ≈Ωiados≈• o udelenie prechodn√©ho pobytu'],
                                ['216', '226', 'Prechodn√Ω pobyt ‚Äì ≈Ωiados≈• o obnovenie prechodn√©ho pobytu'],
                                ['216', '249', 'Prechodn√Ω pobyt ‚Äì Podnikanie - udelenie'],
                                ['216', '240', 'Prechodn√Ω pobyt ‚Äì Rodina - udelenie'],
                                ['216', '241', 'Prechodn√Ω pobyt ‚Äì Rodina - obnova'],
                                ['216', '244', 'Prechodn√Ω pobyt ‚Äì Zamestnanie - udelenie'],
                                ['216', '245', 'Prechodn√Ω pobyt ‚Äì Zamestnanie - obnova'],
                                ['218', '224', 'Trval√Ω pobyt ‚Äì neobmedzen√Ω ƒças'],
                                ['218', '223', 'Trval√Ω pobyt ‚Äì –Ω–∞ 5 rokov']
                            ].map(([v1, v2, label]) => `<option value="${v1}|${v2}"${STEP3_SELECT_1_VALUE === v1 && STEP3_SELECT_2_VALUE === v2 ? ' selected' : ''}>${label} (${v1} ‚Üí ${v2})</option>`).join('')}
                        </select>
                    </label><br/><br/>
                    <label>üß† OpenAI API: <input id="set_openai" value="${OPENAI_API_KEY}" /></label><br/><br/>
                    <label>üß† OpenAI Project: <input id="set_openai_proj" value="${OPENAI_PROJECT_ID}" /></label><br/><br/>
                    <label>üì¨ TG Token: <input id="set_tg_token" value="${TELEGRAM_BOT_TOKEN}" /></label><br/><br/>
                    <label>üì¨ TG Chat ID: <input id="set_tg_chat" value="${TELEGRAM_CHAT_ID}" /></label><br/><br/>
                    <button onclick="saveSettings()">üíæ –ó–±–µ—Ä–µ–≥—Ç–∏</button>
                    <button onclick="document.getElementById('settingsModal').remove()">‚ùå –ó–∞–∫—Ä–∏—Ç–∏</button>
                </div>
            </div>
        `;
        const modal = document.createElement('div');
        modal.innerHTML = html;
        document.body.appendChild(modal);
    }

  window.saveSettings = function () {
        localStorage.setItem('USER_NAME', document.getElementById('set_name').value);
        localStorage.setItem('USER_SURNAME', document.getElementById('set_surname').value);
        localStorage.setItem('USER_BIRTHDATE', document.getElementById('set_birth').value);
        localStorage.setItem('USER_PHONE', document.getElementById('set_phone').value);
        localStorage.setItem('USER_EMAIL', document.getElementById('set_email').value);

        // *** –û–ù–û–í–õ–ï–ù–ò–ô –ö–û–î –¢–£–¢ ***
        const selectedCities = Array.from(document.querySelectorAll('#set_cities_container .city-checkbox:checked'))
                               .map(checkbox => checkbox.value);
        localStorage.setItem('USER_CITIES', JSON.stringify(selectedCities));
        localStorage.setItem('currentCityIndex', '0'); // –°–∫–∏–¥–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–æ–≤–∏—Ö –º—ñ—Å—Ç
        // **********************

        const [v1, v2] = document.getElementById('set_type').value.split('|');
        localStorage.setItem('STEP3_SELECT_1_VALUE', v1);
        localStorage.setItem('STEP3_SELECT_2_VALUE', v2);

        localStorage.setItem('OPENAI_API_KEY', document.getElementById('set_openai').value);
        localStorage.setItem('OPENAI_PROJECT_ID', document.getElementById('set_openai_proj').value);
        localStorage.setItem('TELEGRAM_BOT_TOKEN', document.getElementById('set_tg_token').value);
        localStorage.setItem('TELEGRAM_CHAT_ID', document.getElementById('set_tg_chat').value);
        alert('‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É');
    }

    window.toggleScriptStop = function () {
        isScriptStopped = !isScriptStopped;
        localStorage.setItem('isScriptStopped', isScriptStopped);
        const stopBtn = document.getElementById('stopScriptBtn');
        if (isScriptStopped) {
            stopBtn.textContent = '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏';
            stopBtn.style.backgroundColor = '#5cb85c'; // –ó–µ–ª–µ–Ω–∏–π
            console.log('‚è∏Ô∏è –°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.');
           // sendTelegramMessage('‚è∏Ô∏è –°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.');
        } else {
            stopBtn.textContent = '‚è∏Ô∏è –°—Ç–æ–ø';
            stopBtn.style.backgroundColor = '#d9534f'; // –ß–µ—Ä–≤–æ–Ω–∏–π
            console.log('‚ñ∂Ô∏è –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ.');
        //    sendTelegramMessage('‚ñ∂Ô∏è –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –≤—Ä—É—á–Ω—É.');
            // –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç –±—É–ª–æ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π
            runMainScenario();
        }
    }


    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —ñ –º—ñ—Å—Ç–∞
    let isScriptStopped = localStorage.getItem('isScriptStopped') === 'true' || false;
    let currentCityIndex = parseInt(localStorage.getItem('currentCityIndex') || '0', 10);
    const availableCities = ['Bansk√° Bystrica', 'Bratislava', 'Dunajsk√° Streda', 'Ko≈°ice', 'Michalovce', 'Nitra', 'Nov√© Z√°mky', 'Pre≈°ov', 'Rimavsk√° Sobota', 'Ru≈æomberok', 'Trenƒç√≠n', 'Trnava', '≈Ωilina'];

    // --- –ó config (—Ç—ñ–ª—å–∫–∏ —Ç—É—Ç!)
    // const config1 = await getUserConfig(DEVICE_ID);
   const useServerConfig = await confirmLoadServerConfig(5000);

let config1;
if (useServerConfig) {
    config1 = await getUserConfig(DEVICE_ID);
} else {
config1 = {
    USER_NAME: localStorage.getItem('USER_NAME') || DEFAULT_USER_NAME,
    USER_SURNAME: localStorage.getItem('USER_SURNAME') || DEFAULT_USER_SURNAME,
    USER_BIRTHDATE: localStorage.getItem('USER_BIRTHDATE') || DEFAULT_USER_BIRTHDATE,
    USER_PHONE: localStorage.getItem('USER_PHONE') || DEFAULT_USER_PHONE,
    USER_EMAIL: localStorage.getItem('USER_EMAIL') || DEFAULT_USER_EMAIL,
    USER_CITIES: JSON.parse(localStorage.getItem('USER_CITIES') || JSON.stringify(DEFAULT_USER_CITIES)),
    STEP3_SELECT_1_VALUE: localStorage.getItem('STEP3_SELECT_1_VALUE') || DEFAULT_STEP3_SELECT_1_VALUE,
    STEP3_SELECT_2_VALUE: localStorage.getItem('STEP3_SELECT_2_VALUE') || DEFAULT_STEP3_SELECT_2_VALUE,
    // --- –ö–ª—é—á—ñ ---
    OPENAI_API_KEY: localStorage.getItem('OPENAI_API_KEY') || DEFAULT_OPENAI_API_KEY,
    OPENAI_PROJECT_ID: localStorage.getItem('OPENAI_PROJECT_ID') || DEFAULT_OPENAI_PROJECT_ID,
    TELEGRAM_BOT_TOKEN: localStorage.getItem('TELEGRAM_BOT_TOKEN') || DEFAULT_TELEGRAM_BOT_TOKEN,
    TELEGRAM_CHAT_ID: localStorage.getItem('TELEGRAM_CHAT_ID') || DEFAULT_TELEGRAM_CHAT_ID,
};
}

   const USER_CITIES = config1.USER_CITIES;
    let USER_CITY = USER_CITIES[currentCityIndex];
    const USER_NAME = config1.USER_NAME;
    const USER_SURNAME = config1.USER_SURNAME;
    const USER_BIRTHDATE = config1.USER_BIRTHDATE;
    const USER_PHONE = config1.USER_PHONE;
    const USER_EMAIL = config1.USER_EMAIL;
    const STEP3_SELECT_1_VALUE = config1.STEP3_SELECT_1_VALUE;
    const STEP3_SELECT_2_VALUE = config1.STEP3_SELECT_2_VALUE;
    const OPENAI_API_KEY = config1.OPENAI_API_KEY;
    const OPENAI_PROJECT_ID = config1.OPENAI_PROJECT_ID;
    const TELEGRAM_BOT_TOKEN = config1.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_CHAT_ID = config1.TELEGRAM_CHAT_ID;
    const USER_PASSPORT = 'T'; // –ø—Ä–æ—Å—Ç–æ –æ–∫—Ä–µ–º–æ —Ç—É—Ç
    const OPENAI_MODELS = ['gpt-4.1', 'gpt-4o', 'gpt-4.1-mini', 'gpt-4'];
    const DEEPSEEK_MODELS = ['deepseek-chat', 'deepseek-coder'];

    // ... —Ä–µ—à—Ç–∞ —Ç–≤–æ–≥–æ –∫–æ–¥—É (UI, –ª–æ–≥—ñ–∫–∞) ‚Äî –Ω—ñ—á–æ–≥–æ –∑ USER_*/CITY_* –ù–ï –±–µ—Ä–µ –∑ localStorage! ...
