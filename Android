const config = {
    typingDelayMin: 50,
    typingDelayMax: 150,
    preFieldDelayMin: 300,
    preFieldDelayMax: 800,
    postFieldDelayMin: 80,
    postFieldDelayMax: 200,
    delayedFieldJitterMin: 50,
    delayedFieldJitterMax: 250,
    stepTransitionDelayMin: 5000,
    stepTransitionDelayMax: 7000,
    waitForElementMaxAttempts: 50,
    waitForElementInterval: 200,
};
function triggerEvents(el) {
    el.dispatchEvent(new Event('input', { bubbles: true, cancelable: true }));
    el.dispatchEvent(new Event('change', { bubbles: true, cancelable: false }));
    el.dispatchEvent(new Event('blur', { bubbles: true, cancelable: false }));
}
function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
function randomDelay(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
async function typeValue(el, value) {
    el.value = ''; // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª–µ –ø–µ—Ä–µ–¥ –Ω–∞–±–æ—Ä–æ–º
    triggerEvents(el); // –Ü–Ω–æ–¥—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
    await wait(randomDelay(50, 100)); // –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –Ω–∞–±–æ—Ä—É

    for (const char of String(value)) {
        el.value += char;
        el.dispatchEvent(new Event('input', { bubbles: true, cancelable: true }));
        await wait(randomDelay(config.typingDelayMin, config.typingDelayMax));
    }
    triggerEvents(el);
}
function waitForElement(id) {
    return new Promise((resolve, reject) => {
        let attempts = 0;
        const interval = setInterval(() => {
            const el = document.getElementById(id);
            if (el) {
                clearInterval(interval);
                console.log(`üîç –ï–ª–µ–º–µ–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–æ: ${id}`);
                resolve(el);
            } else {
                attempts++;
                if (attempts >= config.waitForElementMaxAttempts) {
                    clearInterval(interval);
                    console.warn(`‚ö†Ô∏è –ï–ª–µ–º–µ–Ω—Ç –∑ ID "${id}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è ${attempts} —Å–ø—Ä–æ–±.`);
                    resolve(null); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ null, —â–æ–± –æ–±—Ä–æ–±–∏—Ç–∏ —É –≤–∏–∫–ª–∏–∫–∞—é—á–æ–º—É –∫–æ–¥—ñ
                }
            }
        }, config.waitForElementInterval);
    });
}

const delayedFields = {
    'residence-address-county-0': 2000,
    'residence-address-municipality-0': 2000,
    'residence-address-street-0': 2000,
    'fs13-0-travel-doc-type': 500,

    's42-check-gdpr-info': 1000,

     'submitter1': 650,


    //////////////
    //////////////
    //////////////

    // 'f1-citizenship': 1000,
    // 'f1-purpose-of-stay': 1000,
    // 'submitter1': 350,

    //////////////
    //////////////
    //////////////




};
const step1Fields = [
    ['fs3-name-10', "Taras", 'text'],
    ['fs1-surname-10', "Stetsovych", 'text'],

    ['fs7-date-of-birth0', async (el) => {
        el.focus();
        await wait(100);

        // –í–≤–µ–¥–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è
        el.value = '02.09.2005';
        triggerEvents(el);
        await wait(200);
        for (let i = 0; i < 10; i++) {
            el.dispatchEvent(new KeyboardEvent('keydown', { key: 'ArrowLeft', code: 'ArrowLeft', bubbles: true }));
            el.dispatchEvent(new KeyboardEvent('keyup', { key: 'ArrowLeft', code: 'ArrowLeft', bubbles: true }));
            await wait(50);
        }
        for (let i = 0; i < 2; i++) {
            el.dispatchEvent(new KeyboardEvent('keydown', { key: 'Delete', code: 'Delete', bubbles: true }));
            el.dispatchEvent(new KeyboardEvent('keyup', { key: 'Delete', code: 'Delete', bubbles: true }));
            await wait(50);
        }

        triggerEvents(el); // —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó
    }, 'custom'],
    ['s41-delivery-phone-captcha', "+421947171844", 'text'],
    ['email0', "ilariondub1@gmail.com", 'text'],
];

const step2Fields = [
    ['OCP Bratislava - 14.05.2025', true, 'radio'], // ‚úÖ —Ç–æ—á–Ω–∏–π ID —ñ–∑ HTML
    // ['OCP Bansk√° Bystrica', true, 'radio'],
    // ['OCP Dunajsk√° Streda', true, 'radio'],
    // ['OCP Ko≈°ice', true, 'radio'],
    // ['OCP Michalovce', true, 'radio'],
    // ['OCP Nitra', true, 'radio'],
    // ['OCP Nov√© Z√°mky', true, 'radio'],
    // ['OCP Presov', true, 'radio'],
    // ['OCP Rimavsk√° Sobota', true, 'radio'],
    // ['OCP Ruzomberok', true, 'radio'],
    // ['OCP Trenc√≠n', true, 'radio'],
    // ['OCP Trnava', true, 'radio'],
    // ['OCP Zilina', true, 'radio'],

    ['s42-check-gdpr-info', true, 'checkbox'], // true –¥–ª—è checked
    ['fs13-0-travel-doc-type', "1", 'select'],
    ['fs13-travel-doc-number', "C2847", 'text'],








    //////////////
    //////////////
    //////////////


    // ['f1-previous-permit', "true", 'select'], // –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è select
    // ['f1-citizenship', "UKR", 'select'],
    // ['f1-purpose-of-stay', "16", 'select'],
    // //['f1-purpose-of-stay', "18", 'select'],
    // // student 16 - podnikanie, 18 - student


    //////////////
    //////////////
    //////////////



    ['submitter1', null, 'click'],

    //////////////
    //////////////
    //////////////




];

const step3Fields = [
    ['s5-previous-surname-1', "B", 'text'],
    ['s4-name-at-birth-1', "B", 'text'],
    ['s6-sex', "M", 'select'],
    ['s8-place-of-birth', "B", 'text'],
    ['s01-residence-document-id', "C5", 'text'],
    ['s9-country-of-birth', "UKR", 'select'],
    ['s10-citizenship', "UKR", 'select'],
    ['s11-nationality', "10", 'select'], // –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ü–µ ID —á–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    ['s12-marital-status', "2", 'select'],
    ['s19-education', "3", 'select'],
    ['s14-travel-doc-issue-date', "12.12.2020", 'text'],
    ['s15-travel-doc-valid-until', "12.02.2025", 'text'],
    ['s16-travel-doc-issued-by', "C5", 'text'],
    ['s16-0-travel-doc-issued-country', "UKR", 'select'],
    ['s28-last-perm-res-abroad-address', "B", 'text'],
    ['s29-last-perm-res-abroad-country', "UKR", 'select'],
    ['s30-last-perm-res-reg-date', "20.12.2024", 'text'],
    ['address-foreign-copy', null, 'click'], // –ó–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –¥–ª—è –∫–ª—ñ–∫—É
    ['s26-perm-res-abroad-address-native', "B", 'text'],
    ['residence-address-county-0', "6811", 'select'],
    ['residence-address-municipality-0', "117099", 'select'],
    ['residence-address-district-0', "217099", 'select'],
    ['residence-address-register-number-0', '1895', 'text'],
    ['residence-address-street-0', "28641", 'select'],
    ['residence-address-house-number-0', '22', 'text'],
    ['s42-individual-delivery', 'false', 'select'],
    ['delivery-address-copy-0', null, 'click'],
];


// üöÄ –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É
async function fillFields(fields, label) {
    console.log(`--- –ü–æ—á–∞—Ç–æ–∫: ${label} ---`);
    for (const [id, value, type] of fields) {
        console.log(`‚è≥ –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞: ${id}`);
        const el = await waitForElement(id);

        if (!el) {
            console.warn(`[${label}] ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—è: –ï–ª–µ–º–µ–Ω—Ç ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
            continue; // –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—è, —è–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        }

        try {
            // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏ –ø–µ—Ä–µ–¥ –≤–∑–∞—î–º–æ–¥—ñ—î—é
            let preDelay;
            if (delayedFields[id]) {
                const baseDelay = delayedFields[id];
                const jitter = randomDelay(config.delayedFieldJitterMin, config.delayedFieldJitterMax);
                preDelay = baseDelay + jitter;
                console.log(`‚è≥ –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è ${id}: ${baseDelay} + ${jitter} (jitter) = ${preDelay} –º—Å`);
            } else {
                preDelay = randomDelay(config.preFieldDelayMin, config.preFieldDelayMax);
                console.log(`üïê –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ ${id}: ${preDelay} –º—Å`);
            }
            await wait(preDelay);

            // --- –í–∑–∞—î–º–æ–¥—ñ—è –∑ –µ–ª–µ–º–µ–Ω—Ç–æ–º ---
            el.focus(); // –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ñ–æ–∫—É—Å—É –ø–µ—Ä–µ–¥ –¥—ñ—î—é
            await wait(randomDelay(50, 150)); // –ú–∞–ª–µ–Ω—å–∫–∞ –ø–∞—É–∑–∞ –ø—ñ—Å–ª—è —Ñ–æ–∫—É—Å—É

            switch (type) {
                case 'text':
                    console.log(`‚å®Ô∏è –í–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤ ${id}: ${value}`);
                    await typeValue(el, value); // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó typeValue
                    break;
                case 'select':
                    console.log(`üñ±Ô∏è –í–∏–±—ñ—Ä –∑–Ω–∞—á–µ–Ω–Ω—è –≤ ${id}: ${value}`);
                    el.value = value;
                    triggerEvents(el); // –î–ª—è select —Ç–µ–∂ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–¥—ñ—ó
                    break;
                case 'checkbox':
                    console.log(`‚òëÔ∏è –ó–º—ñ–Ω–∞ —Å—Ç–∞–Ω—É —á–µ–∫–±–æ–∫—Å—É ${id}: ${value}`);
                    el.checked = Boolean(value);
                    triggerEvents(el);
                    break;
                case 'click':
                    console.log(`üñ±Ô∏è –ö–ª—ñ–∫ –ø–æ ${id}`);
                    el.click();
                    break;

                case 'custom':
                    console.log(`‚öôÔ∏è –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è ${id}`);
                    await value(el); // value ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è
                    break;
                case 'radio':
                    console.log(`üîò –í–∏–±—ñ—Ä —Ä–∞–¥—ñ–æ-–∫–Ω–æ–ø–∫–∏ ${id}`);
                    el.checked = true;
                    triggerEvents(el);
                    break;


                default:
                    console.warn(`[${label}] ‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–ª—è "${type}" –¥–ª—è ID ${id}`);
                    continue; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø
            }

            console.log(`[${label}] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${id}`);

            const postDelay = randomDelay(config.postFieldDelayMin, config.postFieldDelayMax);
            await wait(postDelay);

        } catch (e) {
            console.error(`[${label}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ ${id}:`, e);
        }
    }
    console.log(`--- –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${label} ---`);
}

// try {
//     history.replaceState(null, null, location.href);
//     localStorage.clear();
//     sessionStorage.clear();
//     document.cookie.split(";").forEach(cookie => {
//         document.cookie = cookie
//             .replace(/^ +/, "")
//             .replace(/=.*/, "=;expires=" + new Date(0).toUTCString() + ";path=/");
//     });
//     console.log("üßπ –Ü—Å—Ç–æ—Ä—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–∞ –∫–µ—à –æ—á–∏—â–µ–Ω–æ.");
// } catch (err) {
//     console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ:", err);
// }

try {
    history.replaceState({}, document.title, location.pathname); // –æ—á–∏—â–µ–Ω–Ω—è URL
    history.pushState(null, null, location.href); // —Å—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π –∑–∞–ø–∏—Å
    window.addEventListener('popstate', function () {
        history.pushState(null, null, location.href); // –±–ª–æ–∫—É—î–º–æ –Ω–∞–∑–∞–¥
    });

    localStorage.clear();
    sessionStorage.clear();
    document.cookie.split(";").forEach(cookie => {
        document.cookie = cookie
            .replace(/^ +/, "")
            .replace(/=.*/, "=;expires=" + new Date(0).toUTCString() + ";path=/");
    });
    console.log("üßπ –Ü—Å—Ç–æ—Ä—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞, localStorage, sessionStorage —ñ cookies –æ—á–∏—â–µ–Ω–æ.");
} catch (err) {
    console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ:", err);
}



(async () => {
    console.log("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ #langSK...");
    const langButton = await waitForElement('langSK');
    if (!langButton) {
        console.error('‚ùå –ö–Ω–æ–ø–∫—É #langSK –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å–∫ –Ω–µ–º–æ–∂–ª–∏–≤–∏–π.');
        return;
    }

    langButton.addEventListener('click', async () => {
        console.log("üü¢ –ö–Ω–æ–ø–∫–∞ –º–æ–≤–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞. –ó–∞–ø—É—Å–∫–∞—î–º–æ –ö—Ä–æ–∫ 1...");
        await wait(randomDelay(800, 1500)); // –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è

        await fillFields(step1Fields, '[Step 1]');

        console.log("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞ –≤–∏–±—ñ—Ä –æ–¥–Ω–æ–≥–æ –∑ –º—ñ—Å—Ç (—Ä–∞–¥—ñ–æ-–∫–Ω–æ–ø–∫–∏)...");

        // const triggerStep2Button = await waitForElement('f1-offices');
        // if (!triggerStep2Button) {
        //     console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –±–ª–æ–∫ –∑ –º—ñ—Å—Ç–∞–º–∏ (#f1-offices).');
        //     return;
        // }


        const triggerStep2Button = await waitForElement('f1-life-situation-select2');
        if (!triggerStep2Button) {
            console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç (#f1-life-situation-select2).');
            return;
        }

        triggerStep2Button.addEventListener('change', async () => {
            const delay = randomDelay(1700, 2500);
            console.log(`üöÄ –ö–Ω–æ–ø–∫–∞ –ö—Ä–æ–∫—É 2 –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞. –ó–∞–ø—É—Å–∫ –ö—Ä–æ–∫—É 2 —á–µ—Ä–µ–∑ ${delay} –º—Å...`);
            await wait(delay);
            await fillFields(step2Fields, '[Step 2]');
            console.log("‚úÖüèÅ –í—Å—ñ –∫—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
        }, { once: true });

        console.log("üìù –ö—Ä–æ–∫ 1 –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞ –∫–ª—ñ–∫ –ö—Ä–æ–∫—É 2...");
    }, { once: true });






    ///////////////////////
    ///////////////////////
    ///////////////////////


//
//     // --- –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ö—Ä–æ–∫—É 3 ---
//     console.log("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ #submitter1 –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –ö—Ä–æ–∫—É 3...");
//     const triggerStep3Button = await waitForElement('submitter1');
//     if (!triggerStep3Button) {
//         console.error('‚ùå –ö–Ω–æ–ø–∫—É #submitter1 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ –Ω–µ–º–æ–∂–ª–∏–≤–∏–π.');
//         return;
//     }
//
//     triggerStep3Button.addEventListener('click', async () => {
//         const delayStep3 = randomDelay(config.stepTransitionDelayMin, config.stepTransitionDelayMax);
//         console.log(`üöÄ –ö–Ω–æ–ø–∫–∞ –ö—Ä–æ–∫—É 3 –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞. –ó–∞–ø—É—Å–∫ –ö—Ä–æ–∫—É 3 —á–µ—Ä–µ–∑ ${delayStep3} –º—Å...`);
//         await wait(delayStep3);
//         await fillFields(step3Fields, '[Step 3]');
//         console.log("‚úÖüèÅ –í—Å—ñ –∫—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
//     }, { once: true });
//
// }, { once: true });
//
// console.log("üìù –ö—Ä–æ–∫ 1 –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞ –∫–ª—ñ–∫ –ö—Ä–æ–∫—É 2...");
// }, { once: true });


    ///////////////////////
    ///////////////////////
    ///////////////////////







})();
