// ==UserScript==
// @name         MINV Autofill Logger + CAPTCHA
// @namespace    Violentmonkey Scripts
// @match        https://portal.minv.sk/wps/portal/domov/ecu/ecu_elektronicke_sluzby/ecu-vysys/*
// @grant        none
// @version      1.1
// @author       -
// @description  –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ MINV –∑ –ª–æ–≥–∞–º–∏ + —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è CAPTCHA —á–µ—Ä–µ–∑ OpenAI
// @run-at       document-end
// ==/UserScript==

(function() {
    'use strict';

    const OPENAI_API_KEY = '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';

    const config = {
        typingDelayMin: 50,
        typingDelayMax: 150,
        preFieldDelayMin: 300,
        preFieldDelayMax: 800,
        postFieldDelayMin: 80,
        postFieldDelayMax: 200,
        delayedFieldJitterMin: 50,
        delayedFieldJitterMax: 250,
        waitForElementMaxAttempts: 50,
        waitForElementInterval: 200,
    };

    function triggerEvents(el) {
        el.dispatchEvent(new Event('input', { bubbles: true }));
        el.dispatchEvent(new Event('change', { bubbles: true }));
        el.dispatchEvent(new Event('blur', { bubbles: true }));
    }

    function wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function randomDelay(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    async function typeValue(el, value) {
        el.value = '';
        triggerEvents(el);
        await wait(randomDelay(50, 100));

        for (const char of String(value)) {
            el.value += char;
            el.dispatchEvent(new Event('input', { bubbles: true }));
            await wait(randomDelay(config.typingDelayMin, config.typingDelayMax));
        }
        triggerEvents(el);
    }

    function waitForElement(id) {
        return new Promise(resolve => {
            let attempts = 0;
            const interval = setInterval(() => {
                const el = document.getElementById(id);
                if (el) {
                    clearInterval(interval);
                    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç: ${id}`);
                    resolve(el);
                } else if (++attempts >= config.waitForElementMaxAttempts) {
                    clearInterval(interval);
                    console.warn(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç: ${id}`);
                    resolve(null);
                }
            }, config.waitForElementInterval);
        });
    }

    async function imageToBase64(img) {
        return new Promise(resolve => {
            const canvas = document.createElement("canvas");
            canvas.width = img.width;
            canvas.height = img.height;
            const ctx = canvas.getContext("2d");
            ctx.drawImage(img, 0, 0);
            resolve(canvas.toDataURL("image/png"));
        });
    }

  async function recognizeCaptcha(imageDataUrl) {
    console.log("üîç –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞–ø—á—ñ –≤ OpenAI...");

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${OPENAI_API_KEY}`,
            "OpenAI-Beta": "assistants=v1",
            "OpenAI-Project": "proj_NtHUbQd0hgmD2cIO6zb7VRUj"  // ‚Üê –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Å–ø—Ä–∞–≤–∂–Ω—ñ–π Project ID!
        },
        body: JSON.stringify({
            model: "gpt-4o",
            messages: [
                {
                    role: "user",
                    content: [
                        { type: "text", text: "–©–æ –∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ü—ñ–π –∫–∞–ø—á—ñ? –ù–∞–ø–∏—à–∏ –ª–∏—à–µ —Å–∏–º–≤–æ–ª–∏ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å." },
                        { type: "image_url", image_url: { url: imageDataUrl } }
                    ]
                }
            ],
            max_tokens: 10
        }),
    });

    const result = await response.json();
    console.log("üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI:", result);

    const captchaText = result?.choices?.[0]?.message?.content?.trim();
    return captchaText;
}

  async function typeCaptchaLikeHuman(el, text) {
    el.focus();
    el.value = '';
    triggerEvents(el);

    for (const char of text) {
        const evt = new KeyboardEvent('keydown', { key: char, bubbles: true });
        el.dispatchEvent(evt);
        el.value += char;
        triggerEvents(el);
        await wait(100); // –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–∏–º–≤–æ–ª–∞–º–∏
    }

    triggerEvents(el);
    el.blur();
    console.log("‚úÖ –ö–∞–ø—á–∞ –≤–≤–µ–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –µ–º—É–ª—è—Ü—ñ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.");
}

    async function solveCaptcha() {
        const imgEl = await waitForElement("captchaImage");
        const inputEl = await waitForElement("answer");

        if (!imgEl || !inputEl) {
            console.warn("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫–∞–ø—á—ñ.");
            return;
        }

        const base64 = await imageToBase64(imgEl);
        const captchaResult = await recognizeCaptcha(base64);

       if (captchaResult) {
    console.log(`‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –∫–∞–ø—á—É: ${captchaResult}`);
  inputEl.focus();
inputEl.value = ''; // üßº –æ—á–∏—â–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –µ–º—É–ª—å–æ–≤–∞–Ω–∏–º –≤–≤–æ–¥–æ–º
await wait(100);
await typeCaptchaLikeHuman(inputEl, captchaResult);
inputEl.blur();
         // üí° –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ –ø–æ–ª—è –∫–∞–ø—á—ñ –Ω–∞ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥
inputEl.style.border = "2px solid lime";
inputEl.style.backgroundColor = "#eaffea";
setTimeout(() => {
    inputEl.style.border = "";
    inputEl.style.backgroundColor = "";
}, 3000);
    console.log("‚úçÔ∏è –í–≤–µ–¥–µ–Ω–æ –∫–∞–ø—á—É –≤ –ø–æ–ª–µ input#answer");

} else {
    console.warn("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–∞–ø—á—É.");
}
    }

    const delayedFields = {
        'residence-address-county-0': 2000,
        'residence-address-municipality-0': 2000,
        'residence-address-street-0': 2000,
        'fs13-0-travel-doc-type': 500,
        's42-check-gdpr-info': 1000,
        'submitter1': 650,
    };

    const step1Fields = [
        ['fs3-name-10', "Oleh", 'text'],
        ['fs1-surname-10', "Lysak", 'text'],
        ['fs7-date-of-birth0', async (el) => {
            el.focus(); await wait(100);
            el.value = '11.08.1975'; triggerEvents(el);
            await wait(200);
            for (let i = 0; i < 10; i++) {
                el.dispatchEvent(new KeyboardEvent('keydown', { key: 'ArrowLeft', bubbles: true }));
                el.dispatchEvent(new KeyboardEvent('keyup', { key: 'ArrowLeft', bubbles: true }));
                await wait(50);
            }
            for (let i = 0; i < 2; i++) {
                el.dispatchEvent(new KeyboardEvent('keydown', { key: 'Delete', bubbles: true }));
                el.dispatchEvent(new KeyboardEvent('keyup', { key: 'Delete', bubbles: true }));
                await wait(50);
            }
            triggerEvents(el);
        }, 'custom'],
        ['s41-delivery-phone-captcha', "+421917086166", 'text'],
        ['email0', "Jankovskyy123@yahoo.com", 'text'],
        ['loadSecondFormButton', (el) => el.click(), 'custom'],
    ];

    const step2Fields = [
        ['OCP Trnava - 13.06.2025', true, 'radio'],
        ['s42-check-gdpr-info', true, 'checkbox'],
        ['fs13-0-travel-doc-type', "1", 'select'],
        ['fs13-travel-doc-number', "C2927", 'text'],
        ['submitter1', null, 'click'],
    ];

    async function fillFields(fields, label) {
        for (const [id, value, type] of fields) {
            const el = await waitForElement(id);
            if (!el) continue;

            let preDelay = delayedFields[id]
                ? delayedFields[id] + randomDelay(config.delayedFieldJitterMin, config.delayedFieldJitterMax)
                : randomDelay(config.preFieldDelayMin, config.preFieldDelayMax);

            await wait(preDelay);
            el.focus();
            await wait(randomDelay(50, 150));

            try {
                switch (type) {
                    case 'text': await typeValue(el, value); break;
                    case 'select': el.value = value; triggerEvents(el); break;
                    case 'checkbox': el.checked = Boolean(value); triggerEvents(el); break;
                    case 'click': el.click(); break;
                    case 'custom': await value(el); break;
                    case 'radio': el.checked = true; triggerEvents(el); break;
                }
            } catch (e) {
                console.error(`[${label}] Error: ${id}`, e);
            }

            await wait(randomDelay(config.postFieldDelayMin, config.postFieldDelayMax));
        }
    }

    (async () => {
        console.log("üöÄ –°—Ç–∞—Ä—Ç –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è");
        await wait(randomDelay(800, 1500));
        await solveCaptcha();
        await fillFields(step1Fields, '[Step 1]');

        const triggerStep2Button = await waitForElement('f1-life-situation-select2');
        if (!triggerStep2Button) {
            console.error('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ select –¥–ª—è –º—ñ—Å—Ç');
            return;
        }

        triggerStep2Button.addEventListener('change', async () => {
            await wait(randomDelay(1700, 2500));
            await fillFields(step2Fields, '[Step 2]');
            console.log("‚úÖ –ö—Ä–æ–∫ 2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
        }, { once: true });

        console.log("üìù –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞...");
    })();
})();
